<?php

namespace App\Livewire\{@className};

use Livewire\Component;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Contracts\View\Factory;
use Illuminate\Contracts\View\View;
use App\Repositories\{@className}\{@className}Repository;

class {@className}Page extends Component
{
    use \WireUi\Traits\WireUiActions;
    use \App\Traits\UploadFileTrait;

    protected $listeners = ['create', 'edit'];
    protected {@className}Repository ${@classNameCamel}Repository;

    public bool $updateMode = false;
    public array ${@classNameSnake} = {@generatedProps};
    public bool $showModalForm = false;
    {@options}

    public function boot({@className}Repository ${@classNameCamel}Repository): void
    {
        $this->{@classNameCamel}Repository = ${@classNameCamel}Repository;
    }

    public function render(): Factory|View|Application
    {
        return view('livewire.{@classNameSlug}.{@classNameSlug}-page');
    }

     public function save(): void
     {
         $this->updateMode ? $this->update() : $this->store();
     }

     public function hydrate(): void
     {
         $this->resetErrorBag();
         $this->resetValidation();
     }

    public function create(): void
    {
        $this->reset(['{@classNameSnake}', 'updateMode', 'myFile']);
        $this->showModalForm = true;
    }

    public function store(): void
    {
        $data = $this->validate(
            {@validate}
        );
        $this->updateMode = false;
        {@storeUpload}
        $this->{@classNameCamel}Repository->create($data['{@classNameSnake}']);
        $this->reset(['{@classNameSnake}', 'showModalForm']);
        $this->notification()->send([
            'title' => '{@classNameSpace} berhasil ditambahkan',
            'icon'  => 'success'
        ]);
        $this->dispatch('refreshDt');
    }

    public function edit($id): void
    {
        $this->reset(['{@classNameSnake}', 'showModalForm','myFile']);
        $this->updateMode = true;
        $this->{@classNameSnake} =  $this->{@classNameCamel}Repository->find($id)->toArray();
        $this->showModalForm = true;
    }

    public function update(): void
    {
        $this->updateMode = true;
        $data = $this->validate(
            {@validate}
        );
        {@updateUpload}
        if ($this->{@classNameSnake}['{@primaryKey}'] && $this->updateMode) {
            $this->{@classNameCamel}Repository->update($this->{@classNameSnake}['{@primaryKey}'],$data['{@classNameSnake}']);
        } else {
            abort('403', '{@classNameSpace} Not Found');
        }
        $this->reset(['{@classNameSnake}', 'showModalForm']);
        $this->notification()->send([
          'title' => '{@classNameSpace} berhasil diupdate',
          'icon'  => 'success'
        ]);
        $this->dispatch('refreshDt');
    }

    public function destroy($id): void
    {
         $data = $this->{@classNameCamel}Repository->find($id);
         {@deleteUpload}
         $data->delete();
         $this->notification()->send([
           'title' => '{@classNameSpace} berhasil dihapus',
           'icon'        => 'success'
        ]);

        $this->dispatch('refreshDt', false);
        $this->reset(['{@classNameSnake}', 'updateMode']);
    }
}
